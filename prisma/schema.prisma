// This is your Prisma schema file,
// adapted for Supabase (PostgreSQL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String       @id @default(uuid()) @db.Uuid
  name          String?
  email         String?      @unique
  role          String?
  password      String?
  absensi       Absensi[]
  homecare      Homecare[]
  homevisit     Homevisit[]
  gajiKaryawan  GajiKaryawan[]
}

model Pasien {
  id            String        @id @default(uuid()) @db.Uuid
  nama          String
  noKtp         String
  usia          Int
  jenisKelamin  String
  tempatLahir   String
  tanggalLahir  DateTime?
  noTelepon     String
  noRM          String?       @unique
  assesments    Assesment[]
}

model Assesment {
  id                    String           @id @default(uuid()) @db.Uuid
  tanggal               DateTime?
  pasien                Pasien           @relation(fields: [pasienId], references: [id])
  pasienId              String           @db.Uuid
  pengkajianUmum        PengkajianUmum?
  lokalLuka             LokalLuka?
  ttv                   Ttv?
  luka                  Luka?
  tujuanPerawatan       TujuanPerawatan?
  keuanganAssesment     KeuanganAssesment?
}

model PengkajianUmum {
  id                            String    @id @default(uuid()) @db.Uuid
  riwayatKejadianLuka           String
  faktorPenyulitPenyembuhan     String
  statusNutrisi                 String
  penyakitPenyerta              String
  tambahanPenyakitPenyerta      String
  vaskularisasi                 String
  statusPsikologis              String
  mobilisasi                    String
  obatObatan                    String
  merokok                       String
  assesment                     Assesment @relation(fields: [assesmentId], references: [id])
  assesmentId                   String    @unique @db.Uuid
}

model LokalLuka {
  id                            String    @id @default(uuid()) @db.Uuid
  tipeLuka                      String
  tipePenyembuhanLuka           String
  kunjungan                     Int
  tanggalKunjungan              DateTime?
  foto                          String
  assesment                     Assesment @relation(fields: [assesmentId], references: [id])
  assesmentId                   String    @unique @db.Uuid
}

model Ttv {
  id                            String    @id @default(uuid()) @db.Uuid
  tekananDarah                  String
  nadi                          String
  pernafasan                    String
  suhu                          String
  gds                           String
  hasilAbpi                     String
  assesment                     Assesment @relation(fields: [assesmentId], references: [id])
  assesmentId                   String    @unique @db.Uuid
}

model Luka {
  id                            String    @id @default(uuid()) @db.Uuid
  stadiumLuka                   String
  ukuranLuka                    String
  goa                           String
  exudate                       String
  pilihExudate                  String
  warnaDasarLuka                String
  dasarLuka                     String
  tepiLuka                      String
  kulitSekitarLuka              String
  tandaInfeksi                  String
  skalaNyeri                    Int?
  pemeriksaanPenunjang          String
  pemeriksaanPenunjangTambahan  String
  foto                          String
  assesment                     Assesment @relation(fields: [assesmentId], references: [id])
  assesmentId                   String    @unique @db.Uuid
}

model TujuanPerawatan {
  id                            String    @id @default(uuid()) @db.Uuid
  angkatJaringan                Boolean
  angkatBendaAsing              Boolean
  rangsangGranulasi             Boolean
  percepatProsesInflamasi       Boolean
  cegahInfeksi                  Boolean
  angkatBiofilm                 Boolean
  ciptakanKelembaban            Boolean
  jagaKelembaban                Boolean
  serapCairanLuka               Boolean
  lindungiKulit                 Boolean
  dukungProsesEpitelisasi       Boolean
  tipiskanTepiLuka              Boolean
  kurangiFaktorPenekanan        Boolean
  kurangiNyeri                  Boolean
  atasiBau                      Boolean
  atasiHipergranulasi           Boolean
  implementasi                  String
  evaluase                      String
  rencanaTindakan               String
  assesment                     Assesment @relation(fields: [assesmentId], references: [id])
  assesmentId                   String    @unique @db.Uuid
}

model KeuanganAssesment {
  id                            String    @id @default(uuid()) @db.Uuid
  biaya                         Int
  tanggalBayar                  DateTime
  assesment                     Assesment @relation(fields: [assesmentId], references: [id])
  assesmentId                   String    @unique @db.Uuid
}

model BHP {
  id                String        @id @default(uuid()) @db.Uuid
  nama              String
  jumlahStok        Int
  ukuran            String
  tipeStok          String
  harga             Int
  keuanganStokBhp   KeuanganStokBhp[]
}

model Alkes {
  id                  String        @id @default(uuid()) @db.Uuid
  nama                String
  jumlahStok          Int
  ukuran              String
  tipeStok            String
  harga               Int
  keuanganStokAlkes   KeuanganStokAlkes[]
}

model KeuanganStokAlkes {
  id            String        @id @default(uuid()) @db.Uuid
  tanggal       DateTime?
  nominal       Int 
  tipe          String
  alkes         Alkes         @relation(fields: [alkesId], references: [id])
  alkesId       String        @db.Uuid
}

model KeuanganStokBhp {
  id            String        @id @default(uuid()) @db.Uuid
  tanggal       DateTime?
  nominal       Int 
  tipe          String
  bhp           BHP           @relation(fields: [bhpId], references: [id])
  bhpId         String        @db.Uuid
}

model Absensi {
  id            String        @id @default(uuid()) @db.Uuid
  tanggal       DateTime?
  foto          String
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @db.Uuid
}

model Homecare {
  id            String        @id @default(uuid()) @db.Uuid
  deskripsi     String?
  tanggal       DateTime?
  bagian        String
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @db.Uuid
}

model Homevisit {
  id            String        @id @default(uuid()) @db.Uuid
  deskripsi     String?
  tanggal       DateTime?
  bagian        String
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @db.Uuid
}

model GajiKaryawan {
  id            String        @id @default(uuid()) @db.Uuid
  tanggal       DateTime?
  nominal       Int
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @db.Uuid
}

model PasienPerawatan {
  id            String        @id @default(uuid()) @db.Uuid
  nama          String
  paket         String
  perawatan     Perawatan[]
}

model Perawatan {
  id                       String        @id @default(uuid()) @db.Uuid
  biaya                    Int
  tanggal                  DateTime?
  deskripsi                String
  pasienPerawatan          PasienPerawatan @relation(fields: [pasienId], references: [id])
  pasienId                 String          @db.Uuid
}

model Piutang {
  id                       String        @id @default(uuid()) @db.Uuid
  namaPerusahaan           String                   
  jenisProduk              String               
  jumlah                   Int               
  noFaktur                 String               
  total                    Int     
  status                   String          
}

enum Role {
  ADMIN
  KARYAWAN
}
